# logit config template v0.2.0-alpha
# Notice that starting with # is comment, and it must be a new line
# Grammar is based on Json, but adds more features to let it become more configured and easy-to-read

# Logger level, all valid values are debug, info, warn, error, off
# Default is debug
"level": "info",

# Caller will determine weather you need caller info or not. All valid value is true and false
# Notice that adding caller will use runtime method which costs lots of time
# So set it to true only when you really need it
# Default is false
"caller": false,

# Logger handler, you can add more than one handlers to your logger
# All valid values are console, json
# Only you has registered your handler to logit by logit.RegisterHandler then it can be used here
# At lease add one handler or it will panic
"handlers": {
    # Notice that what params can be set here is dependent to what handler you use
    # Also, every params you set here will be injected into newHandler in logit.RegisterHandler as kv pair form
    # Config file is only responsible for injection, so handlers have responsibility to decide how to use these params
    # Different handler may have different params, check document of using handler to know about more information
    #
    # console handler
    # These are all supported params
    "console": {
        # Log encoder, all valid values are text, json
        # text: Encode log to plain text, such as `[info] [2020-04-24 13:14:15] xxx`
        # json: Encode log to Json, such as `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}`
        # Default is text
        "encoder": "text",

        # How to format time, if this value is "unix", then unix format will be used
        # Default is 2006-01-02 15:04:05
        # "timeFormat": "unix",
        "timeFormat": "2006-01-02"
    },

    # file handler
    # These are all supported params
    "file": {
        # Log encoder, all valid values are text, json
        # text: Encode log to plain text, such as `[info] [2020-04-24 13:14:15] xxx`
        # json: Encode log to Json, such as `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}`
        # Default is text
        "encoder": "text",

        # How to format time, if this value is "unix", then unix format will be used
        # Default is 2006-01-02 15:04:05
        # "timeFormat": "unix",
        "timeFormat": "2006-01-02",

        # Log writer
        # Default is os.Stdout
        "writer": {
            # Use a rolling log mechanism or not, all valid values are duration, size, off
            # duration: the log file rolls to next file after fixed duration
            #           In this mode, you can set time interval and destination folder for log output
            # size: the log file rolls to next file after fixed file size
            #       In this mode, you can set the maximum file size and the destination folder for log output
            # off: only one log file will be use in this mode. You can set the path of the log file
            # Use os.Stdout as writer if this param is missing
            "rolling": "duration",

            # When using duration mode
            # Notice that the unit of duration is second, so the log file will roll every second, default is one day
            # directory is the destination folder for log output, which stores all log file rolled, default is ./
            #"rolling": "duration",
            "duration": 1,
            "directory": "D:/"

            # When using size mode
            # Notice that the unit of size is MB, so the log file will roll every MB, default is 64MB
            # directory is the destination folder for log output, which stores all log file rolled, default is ./
            #"rolling": "size",
            #"size": 1,
            #"directory": "D:/"

            # When using off mode
            # file is the path of the log file, default is ./logit-[created unix time].log
            #"rolling": "off",
            #"file": "D:/logit.log"
        }
    }
}