// logit 配置文件的模板 v0.2.10
// 注意：以 // 开头的是注释，不参与配置文件的解析，注释必须是单独的一行，不能写在属性的后面
// 语法是基于 Json 并作了一些改动使其更适合做配置文件，所以要注意双引号和逗号这些格式
// 下面所有涉及目录路径的都使用 / 或者 \\ 而不能是 \，否则会造成配置解析出错，这意味着特殊字符需要自行转义
{
    // 日志级别，可取值有 debug，info，warn，error，off
    // 如果不配置的话，默认是 debug
    // 如果配置为 off，就意味着关闭日志记录
    "level": "info",
    // 是否需要记录文件信息，可取值有 true，false
    // 注意记录文件信息会有运行时操作，比较消耗性能，确保您是必须要记录才开启这个选项
    // 如果不配置的话，默认是 false
    "caller": false,
    // 日志处理器，您可以添加多个日志处理器，内置的可选值有 console，file，duration，size
    // 只有当你使用 logit.RegisterHandler 将你自定义的日志处理器注册进 logit 才可以在这里使用
    // 至少需要配置一个日志处理器，否则会报错
    "handlers": {
        // 注意：每个日志处理器所需要的参数会以键值对的形式注入到 logit.RegisterHandler 的 newHandler 中
        // 配置文件只负责把参数传递进去，要怎么使用这些参数是每个日志处理器自己的事情
        // 所以不同的日志处理器的参数需要参考具体日志处理器的文档描述

        // console 日志处理器
        // 下面是该日志处理器支持的所有参数
        "console": {
            // 日志编码器，可选值有 text，json
            // text: 使用普通文本形式编码日志，通常是 `[info] [2020-04-24 13:14:15] xxx` 这样的形式
            // json: 使用 Json 形式编码日志，通常是 `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}` 这样的形式
            // 如果不配置的话，默认是 text
            "encoder": "text",
            // 时间格式化样板，如果是 "unix" 就使用 unix 形式
            // 如果不配置的话，默认是 2006-01-02 15:04:05
            // "timeFormat": "unix",
            "timeFormat": "2006年01月02日"
        },
        // file 日志处理器
        // 下面是该日志处理器支持的所有参数
        "file": {
            // 日志文件的路径
            // 如果不配置的话，默认是 ./logit-[created unix time].log
            "path": "D:/logit.log",
            // 日志编码器，可选值有 text，json
            // text: 使用普通文本形式编码日志，通常是 `[info] [2020-04-24 13:14:15] xxx` 这样的形式
            // json: 使用 Json 形式编码日志，通常是 `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}` 这样的形式
            // 如果不配置的话，默认是 text
            "encoder": "text",
            // 时间格式化样板，如果是 "unix" 就使用 unix 形式
            // 如果不配置的话，默认是 2006-01-02 15:04:05
            // "timeFormat": "unix",
            "timeFormat": "2006年01月02日"
        },
        // duration 日志处理器
        // 下面是该日志处理器支持的所有参数
        "duration": {
            // 日志存储的文件夹
            // 因为会有很多的日志文件需要存储，所以这里配置的是文件夹，如果不配置的话，默认是 ./
            "directory": "D:/",
            // 滚动阈值，时间间隔，单位是秒
            // 假设 10:00:00 创建了日志文件，limit 配置的是 60，则当时间为 10:01:00 的时候，就会滚动到新的日志文件
            // 如果不配置的话，默认是一天
            "limit": 60,
            // 日志编码器，可选值有 text，json
            // text: 使用普通文本形式编码日志，通常是 `[info] [2020-04-24 13:14:15] xxx` 这样的形式
            // json: 使用 Json 形式编码日志，通常是 `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}` 这样的形式
            // 如果不配置的话，默认是 text
            "encoder": "text",
            // 时间格式化样板，如果是 "unix" 就使用 unix 形式
            // 如果不配置的话，默认是 2006-01-02 15:04:05
            // "timeFormat": "unix",
            "timeFormat": "2006年01月02日"
        },
        // size 日志处理器
        // 下面是该日志处理器支持的所有参数
        "size": {
            // 日志存储的文件夹
            // 因为会有很多的日志文件需要存储，所以这里配置的是文件夹，如果不配置的话，默认是 ./
            "directory": "D:/",
            // 滚动阈值，最大日志文件大小，单位是 MB
            // 假设 limit 配置的是 16，则当日志文件大小为 16 MB 的时候，就会滚动到新的日志文件
            // 如果不配置的话，默认是 64 MB
            "limit": 16,
            // 日志编码器，可选值有 text，json
            // text: 使用普通文本形式编码日志，通常是 `[info] [2020-04-24 13:14:15] xxx` 这样的形式
            // json: 使用 Json 形式编码日志，通常是 `{"level":"info", "time":"2020-04-24 13:14:15", "msg":"xxx"}` 这样的形式
            // 如果不配置的话，默认是 text
            "encoder": "text",
            // 时间格式化样板，如果是 "unix" 就使用 unix 形式
            // 如果不配置的话，默认是 2006-01-02 15:04:05
            // "timeFormat": "unix",
            "timeFormat": "2006年01月02日"
        },
        // level based 日志处理器
        // 这个日志处理器一共有四个：debug，info，warn，error
        // 它们只是一个包装器，做了一个日志级别的过滤，比如 debug 的日志处理器就只会处理 debug 级别的日志
        // 每个日志处理器内部可以添加多个日志处理器，比如 console 日志处理器，甚至是再添加一个 level based 日志处理器
        // 所以日志怎么处理还是要靠具体添加的日志处理器，您可以添加所有注册进 logit 或者说上面出现的日志处理器
        "debug": {
            "console": {},
            "file": {
                "path": "D:/debug.log"
            }
        },
        "info": {
            "console": {},
            "file": {
                "path": "D:/info.log"
            }
        },
        "warn": {
            "console": {},
            "file": {
                "path": "D:/warn.log"
            }
        },
        "error": {
            "console": {},
            "file": {
                "path": "D:/error.log"
            }
        },
        // level shielded 日志处理器
        // 这个日志处理器一共有四个：!debug，!info，!warn，!error
        // 它们只是一个包装器，做了一个日志级别的过滤，比如 !debug 的日志处理器就只会处理 debug 级别之外的日志
        // 每个日志处理器内部可以添加多个日志处理器，比如 console 日志处理器，甚至是再添加一个 level shielded 日志处理器
        // 所以日志怎么处理还是要靠具体添加的日志处理器，您可以添加所有注册进 logit 或者说上面出现的日志处理器
        "!debug": {
            "console": {},
            "file": {
                "path": "D:/non-debug.log"
            }
        },
        "!info": {
            "console": {},
            "file": {
                "path": "D:/non-info.log"
            }
        },
        "!warn": {
            "console": {},
            "file": {
                "path": "D:/non-warn.log"
            }
        },
        "!error": {
            "console": {},
            "file": {
                "path": "D:/non-error.log"
            }
        }
    }
}